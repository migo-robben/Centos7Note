#usda 1.0
(
    defaultPrim = "pCube1"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def ArnoldOptions "options"
{
    int AA_samples = 3
    string camera = "/persp/perspShape"
    string color_manager = "/defaultColorMgtGlobals"
    float frame = 1
    int GI_diffuse_depth = 1
    int GI_specular_depth = 1
    int GI_transmission_depth = 8
    string[] outputs = ["RGBA RGBA /defaultArnoldFilter_gaussian_filter /defaultArnoldDriver_driver_exr_RGBA"]
    string primvars:render_layer = "defaultRenderLayer" (
        elementSize = 1
        interpolation = "constant"
    )
    string procedural_searchpath = "Z:/USD_Template/USD_PROJ/"
    bool texture_automip = 0
    bool texture_per_file_stats = 1
    string texture_searchpath = "Z:/USD_Template/USD_PROJ/sourceimages"
    int threads = 8
    int xres = 960
    int yres = 540
}

def ArnoldGaussianFilter "defaultArnoldFilter_gaussian_filter"
{
}

def ArnoldDriverExr "defaultArnoldDriver_driver_exr_RGBA"
{
    string color_space = ""
    string filename = "Z:/USD_Template/USD_PROJ/images/box.exr"
}

def ArnoldColorManagerOcio "defaultColorMgtGlobals"
{
    string color_space_linear = "ACES - ACEScg"
    string config = "C:/test_3rd_party_plugins/OCIOConfigs/aces_1.1/config.ocio"
}

def "cube"
{
    def Mesh "pCube1"
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </materials/aiStandardSurface2>
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token orientation = "rightHanded"
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        bool primvars:arnold:smoothing = 1
        token subdivisionScheme = "none"
    }
}

def "materials"
{
    def Material "aiStandardSurface2"
    {
        token outputs:arnold:surface.connect = </aiStandardSurface2.outputs:surface>
    }
}

def Shader "aiStandardSurface2"
{
    uniform token info:id = "arnold:standard_surface"
    float inputs:base = 0.53
    color3f inputs:base_color = (0.19340128, 0.6329083, 0.86558443)
    float inputs:coat = 0.9
    float inputs:coat_roughness = 0.01
    float inputs:specular_anisotropy = 0.45
    float inputs:specular_IOR = 1.518
    float inputs:specular_roughness = 0.02
    float inputs:transmission_depth = 0.9
    token outputs:surface
}

def "persp"
{
    def ArnoldPerspCamera "perspShape"
    {
        float[] aperture_size = [0]
        float far_clip = 10000
        float[] focus_distance = [1]
        float[] fov = [54.432224]
        float2[] lens_shift = [(0, 0)]
        float2[] lens_tilt_angle = [(0, 0)]
        vector3f[] look_at = [(0, 0, -1)]
        matrix4d[] matrix = [( (0.9360595345497131, 0, -0.35184165835380554, 0), (-0.14163759350776672, 0.9153933525085449, -0.37682071328163147, 0), (0.32207348942756653, 0.40256062150001526, 0.8568626642227173, 0), (1.9044089317321777, 2.609614372253418, 5.1862053871154785, 1) )]
        float motion_end = 0
        float near_clip = 0.1
        vector3f[] position = [(0, 0, 0)]
        string primvars:dcc_name = "perspShape" (
            elementSize = 1
            interpolation = "constant"
        )
        float2[] screen_window_max = [(1, 1)]
        float2[] screen_window_min = [(-1, -1)]
        vector3f[] up = [(0, 1, 0)]
        color4f uv_remap = (0, 0, 0, 1)
    }
}

